package multithreading;

/*class MyThread extends Thread
{
    public MyThread(String name)
    {
        super(name);
    }
    public void run()
    {
        int i=1;
        while(true)
        {
            System.out.println("YOYO "+i);
            i++;
            
        }
    }
}*/

       
        //System.out.println("State "+t.getState());
/*public void run()
    {
        int i=1;
        while(true)
        {
            System.out.println("Hi "+i);
            i++;
        }
    }*/
/*class Mythread extends Thread
{
    public void run()
    {
        int i=1;
        while(true)
        {
            System.out.println("Hello "+i);
            i++;
        }
    }
}*/

/*class MyData
{
    public void display(String name)
    {
        synchronized(this)
        {
        for(int i=0;i<name.length();i++)
        {
            System.out.println(name.charAt(i));
        }
        }
    }
}

class MyThread1 extends Thread
{
    MyData d;
    public MyThread1(MyData d)
    {
        this.d=d;
    }
    public void run()
    {
        d.display("Hello World");
    }
}

class MyThread2 extends Thread
{
    MyData d;
    public MyThread2(MyData s)
    {
        d=s;
    }
    public void run()
    {
        d.display("Welcome to this classic meet");
    }
}*/

/*class Atm
{
    synchronized public void withdraw(String name,float amount)
    {
        System.out.println(name+" is withdrawing "+amount);
    }
    synchronized public void checkBalance(String name)
    {
        System.out.println(name+" is checking balance");
    }
}

class Customer extends Thread
{
    Atm atm;
    String name;
    float amount;
    
    public Customer(Atm atm,String name,float amount)
    {
        this.name=name;
        this.atm=atm;
        this.amount=amount;
    }
    
    public void run()
    {
        atm.checkBalance(name);
        atm.withdraw(name, amount);
    }
}*/

class MyData
{
    int value=0;
    boolean flag=true;
    
    synchronized public void set(int v) throws Exception
    {
        while(flag!=true)
            wait();
        value=v;
        flag=false;
        notify();
    }
    
    synchronized public int get() throws Exception
    {
        int r=0;
        while(flag!=false)
            wait();
        flag=true;
        r=value;
        notify();
        
        return value;
    }
}

class Consumer extends Thread
{
    MyData d;
    public Consumer(MyData s)
    {
        d=s;
    }
    
    public void run()
    {
        int i=1;
        while(true)
        {
            try{
            System.out.println(d.get());}catch(Exception e){}
        }
    }
}

class Producer extends Thread
{
    MyData d;
    public Producer(MyData d)
    {
        this.d=d;
    }
    public void run() 
    {
        int i=1;
        while(true)
        {
            try
            {
            d.set(i);
            System.out.println("Producer: "+i);
            i++;
            }
            catch(Exception e)
            {
                
            }
        }
    }
}

public class Multithreading
{
    public static void main(String[] args) throws Exception
    {
        /*MyThread t=new MyThread("First Thread");
        
        t.setDaemon(true);
        
        t.start();
        t.interrupt();
        //t.join();
        //System.out.println("Name "+t.getName());
        //System.out.println("Priority "+t.getPriority());
        int i=1;
        while(true)
        {
            System.out.println("hi "+i);
            i++;
            
            Thread.yield();
        }
        MyData d=new MyData();
        MyThread1 t1=new MyThread1(d);
        MyThread2 t2=new MyThread2(d);
        t1.start();
        t2.start();
        Atm a=new Atm();
        Customer c1=new Customer(a,"Rocky",100000);
        Customer c2=new Customer(a,"Yash",3000000);
        c1.start();
        c2.start();
        MyData d=new MyData();
        Producer p=new Producer(d);
        Consumer c=new Consumer(d);
        p.start();
        c.start();*/
        
    }
}

 
